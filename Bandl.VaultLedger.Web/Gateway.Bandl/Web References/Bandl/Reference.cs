//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace Bandl.Library.VaultLedger.Gateway.Bandl.Bandl {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="BandlServiceSoap", Namespace="http://www.bandl.com")]
    public partial class BandlService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private MethodHeader methodHeaderValueField;
        
        private System.Threading.SendOrPostCallback OnlineHelpParametersOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMediumTypesOperationCompleted;
        
        private System.Threading.SendOrPostCallback PublishExceptionOperationCompleted;
        
        private System.Threading.SendOrPostCallback NewScriptExistsOperationCompleted;
        
        private System.Threading.SendOrPostCallback DownloadNextScriptOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReceiveSubaccountsOperationCompleted;
        
        private System.Threading.SendOrPostCallback RetrieveLicensesOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateAccountOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteAccountOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteAccount1OperationCompleted;
        
        private System.Threading.SendOrPostCallback GrantLicenseOperationCompleted;
        
        private System.Threading.SendOrPostCallback AuditListXmitSendOperationCompleted;
        
        private System.Threading.SendOrPostCallback AuditListXmitReceiveOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetWebVersionRangeOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public BandlService() {
            this.Url = global::Bandl.Library.VaultLedger.Gateway.Bandl.Properties.Settings.Default.Bandl_Library_VaultLedger_Gateway_Bandl_Bandl_BandlService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public MethodHeader MethodHeaderValue {
            get {
                return this.methodHeaderValueField;
            }
            set {
                this.methodHeaderValueField = value;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event OnlineHelpParametersCompletedEventHandler OnlineHelpParametersCompleted;
        
        /// <remarks/>
        public event GetMediumTypesCompletedEventHandler GetMediumTypesCompleted;
        
        /// <remarks/>
        public event PublishExceptionCompletedEventHandler PublishExceptionCompleted;
        
        /// <remarks/>
        public event NewScriptExistsCompletedEventHandler NewScriptExistsCompleted;
        
        /// <remarks/>
        public event DownloadNextScriptCompletedEventHandler DownloadNextScriptCompleted;
        
        /// <remarks/>
        public event ReceiveSubaccountsCompletedEventHandler ReceiveSubaccountsCompleted;
        
        /// <remarks/>
        public event RetrieveLicensesCompletedEventHandler RetrieveLicensesCompleted;
        
        /// <remarks/>
        public event CreateAccountCompletedEventHandler CreateAccountCompleted;
        
        /// <remarks/>
        public event DeleteAccountCompletedEventHandler DeleteAccountCompleted;
        
        /// <remarks/>
        public event DeleteAccount1CompletedEventHandler DeleteAccount1Completed;
        
        /// <remarks/>
        public event GrantLicenseCompletedEventHandler GrantLicenseCompleted;
        
        /// <remarks/>
        public event AuditListXmitSendCompletedEventHandler AuditListXmitSendCompleted;
        
        /// <remarks/>
        public event AuditListXmitReceiveCompletedEventHandler AuditListXmitReceiveCompleted;
        
        /// <remarks/>
        public event GetWebVersionRangeCompletedEventHandler GetWebVersionRangeCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("MethodHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.bandl.com/OnlineHelpParameters", RequestNamespace="http://www.bandl.com", ResponseNamespace="http://www.bandl.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void OnlineHelpParameters(ref string engine, ref string project, ref string window) {
            object[] results = this.Invoke("OnlineHelpParameters", new object[] {
                        engine,
                        project,
                        window});
            engine = ((string)(results[0]));
            project = ((string)(results[1]));
            window = ((string)(results[2]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginOnlineHelpParameters(string engine, string project, string window, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("OnlineHelpParameters", new object[] {
                        engine,
                        project,
                        window}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndOnlineHelpParameters(System.IAsyncResult asyncResult, out string engine, out string project, out string window) {
            object[] results = this.EndInvoke(asyncResult);
            engine = ((string)(results[0]));
            project = ((string)(results[1]));
            window = ((string)(results[2]));
        }
        
        /// <remarks/>
        public void OnlineHelpParametersAsync(string engine, string project, string window) {
            this.OnlineHelpParametersAsync(engine, project, window, null);
        }
        
        /// <remarks/>
        public void OnlineHelpParametersAsync(string engine, string project, string window, object userState) {
            if ((this.OnlineHelpParametersOperationCompleted == null)) {
                this.OnlineHelpParametersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnOnlineHelpParametersOperationCompleted);
            }
            this.InvokeAsync("OnlineHelpParameters", new object[] {
                        engine,
                        project,
                        window}, this.OnlineHelpParametersOperationCompleted, userState);
        }
        
        private void OnOnlineHelpParametersOperationCompleted(object arg) {
            if ((this.OnlineHelpParametersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.OnlineHelpParametersCompleted(this, new OnlineHelpParametersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("MethodHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.bandl.com/GetMediumTypes", RequestNamespace="http://www.bandl.com", ResponseNamespace="http://www.bandl.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public MediumTypeDetails[] GetMediumTypes() {
            object[] results = this.Invoke("GetMediumTypes", new object[0]);
            return ((MediumTypeDetails[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetMediumTypes(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetMediumTypes", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public MediumTypeDetails[] EndGetMediumTypes(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((MediumTypeDetails[])(results[0]));
        }
        
        /// <remarks/>
        public void GetMediumTypesAsync() {
            this.GetMediumTypesAsync(null);
        }
        
        /// <remarks/>
        public void GetMediumTypesAsync(object userState) {
            if ((this.GetMediumTypesOperationCompleted == null)) {
                this.GetMediumTypesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMediumTypesOperationCompleted);
            }
            this.InvokeAsync("GetMediumTypes", new object[0], this.GetMediumTypesOperationCompleted, userState);
        }
        
        private void OnGetMediumTypesOperationCompleted(object arg) {
            if ((this.GetMediumTypesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMediumTypesCompleted(this, new GetMediumTypesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("MethodHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.bandl.com/PublishException", RequestNamespace="http://www.bandl.com", ResponseNamespace="http://www.bandl.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void PublishException(string source, string message, string stackTrace) {
            this.Invoke("PublishException", new object[] {
                        source,
                        message,
                        stackTrace});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginPublishException(string source, string message, string stackTrace, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("PublishException", new object[] {
                        source,
                        message,
                        stackTrace}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndPublishException(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void PublishExceptionAsync(string source, string message, string stackTrace) {
            this.PublishExceptionAsync(source, message, stackTrace, null);
        }
        
        /// <remarks/>
        public void PublishExceptionAsync(string source, string message, string stackTrace, object userState) {
            if ((this.PublishExceptionOperationCompleted == null)) {
                this.PublishExceptionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPublishExceptionOperationCompleted);
            }
            this.InvokeAsync("PublishException", new object[] {
                        source,
                        message,
                        stackTrace}, this.PublishExceptionOperationCompleted, userState);
        }
        
        private void OnPublishExceptionOperationCompleted(object arg) {
            if ((this.PublishExceptionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PublishExceptionCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("MethodHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.bandl.com/NewScriptExists", RequestNamespace="http://www.bandl.com", ResponseNamespace="http://www.bandl.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool NewScriptExists(string clientVersion) {
            object[] results = this.Invoke("NewScriptExists", new object[] {
                        clientVersion});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginNewScriptExists(string clientVersion, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("NewScriptExists", new object[] {
                        clientVersion}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndNewScriptExists(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void NewScriptExistsAsync(string clientVersion) {
            this.NewScriptExistsAsync(clientVersion, null);
        }
        
        /// <remarks/>
        public void NewScriptExistsAsync(string clientVersion, object userState) {
            if ((this.NewScriptExistsOperationCompleted == null)) {
                this.NewScriptExistsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnNewScriptExistsOperationCompleted);
            }
            this.InvokeAsync("NewScriptExists", new object[] {
                        clientVersion}, this.NewScriptExistsOperationCompleted, userState);
        }
        
        private void OnNewScriptExistsOperationCompleted(object arg) {
            if ((this.NewScriptExistsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.NewScriptExistsCompleted(this, new NewScriptExistsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("MethodHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.bandl.com/DownloadNextScript", RequestNamespace="http://www.bandl.com", ResponseNamespace="http://www.bandl.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] DownloadNextScript(string clientVersion, out string newVersion) {
            object[] results = this.Invoke("DownloadNextScript", new object[] {
                        clientVersion});
            newVersion = ((string)(results[1]));
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDownloadNextScript(string clientVersion, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DownloadNextScript", new object[] {
                        clientVersion}, callback, asyncState);
        }
        
        /// <remarks/>
        public byte[] EndDownloadNextScript(System.IAsyncResult asyncResult, out string newVersion) {
            object[] results = this.EndInvoke(asyncResult);
            newVersion = ((string)(results[1]));
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void DownloadNextScriptAsync(string clientVersion) {
            this.DownloadNextScriptAsync(clientVersion, null);
        }
        
        /// <remarks/>
        public void DownloadNextScriptAsync(string clientVersion, object userState) {
            if ((this.DownloadNextScriptOperationCompleted == null)) {
                this.DownloadNextScriptOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDownloadNextScriptOperationCompleted);
            }
            this.InvokeAsync("DownloadNextScript", new object[] {
                        clientVersion}, this.DownloadNextScriptOperationCompleted, userState);
        }
        
        private void OnDownloadNextScriptOperationCompleted(object arg) {
            if ((this.DownloadNextScriptCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DownloadNextScriptCompleted(this, new DownloadNextScriptCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("MethodHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.bandl.com/ReceiveSubaccounts", RequestNamespace="http://www.bandl.com", ResponseNamespace="http://www.bandl.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ReceiveSubaccounts(string[] subaccounts) {
            this.Invoke("ReceiveSubaccounts", new object[] {
                        subaccounts});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginReceiveSubaccounts(string[] subaccounts, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ReceiveSubaccounts", new object[] {
                        subaccounts}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndReceiveSubaccounts(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void ReceiveSubaccountsAsync(string[] subaccounts) {
            this.ReceiveSubaccountsAsync(subaccounts, null);
        }
        
        /// <remarks/>
        public void ReceiveSubaccountsAsync(string[] subaccounts, object userState) {
            if ((this.ReceiveSubaccountsOperationCompleted == null)) {
                this.ReceiveSubaccountsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReceiveSubaccountsOperationCompleted);
            }
            this.InvokeAsync("ReceiveSubaccounts", new object[] {
                        subaccounts}, this.ReceiveSubaccountsOperationCompleted, userState);
        }
        
        private void OnReceiveSubaccountsOperationCompleted(object arg) {
            if ((this.ReceiveSubaccountsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReceiveSubaccountsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("MethodHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.bandl.com/RetrieveLicenses", RequestNamespace="http://www.bandl.com", ResponseNamespace="http://www.bandl.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ProductLicenseDetails[] RetrieveLicenses(string companyName) {
            object[] results = this.Invoke("RetrieveLicenses", new object[] {
                        companyName});
            return ((ProductLicenseDetails[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRetrieveLicenses(string companyName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RetrieveLicenses", new object[] {
                        companyName}, callback, asyncState);
        }
        
        /// <remarks/>
        public ProductLicenseDetails[] EndRetrieveLicenses(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ProductLicenseDetails[])(results[0]));
        }
        
        /// <remarks/>
        public void RetrieveLicensesAsync(string companyName) {
            this.RetrieveLicensesAsync(companyName, null);
        }
        
        /// <remarks/>
        public void RetrieveLicensesAsync(string companyName, object userState) {
            if ((this.RetrieveLicensesOperationCompleted == null)) {
                this.RetrieveLicensesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRetrieveLicensesOperationCompleted);
            }
            this.InvokeAsync("RetrieveLicenses", new object[] {
                        companyName}, this.RetrieveLicensesOperationCompleted, userState);
        }
        
        private void OnRetrieveLicensesOperationCompleted(object arg) {
            if ((this.RetrieveLicensesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RetrieveLicensesCompleted(this, new RetrieveLicensesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("MethodHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.bandl.com/CreateAccount", RequestNamespace="http://www.bandl.com", ResponseNamespace="http://www.bandl.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CreateAccount(string companyName, string contactName, string phoneNo, string email, string accountNo, int accountType) {
            object[] results = this.Invoke("CreateAccount", new object[] {
                        companyName,
                        contactName,
                        phoneNo,
                        email,
                        accountNo,
                        accountType});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCreateAccount(string companyName, string contactName, string phoneNo, string email, string accountNo, int accountType, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CreateAccount", new object[] {
                        companyName,
                        contactName,
                        phoneNo,
                        email,
                        accountNo,
                        accountType}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndCreateAccount(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CreateAccountAsync(string companyName, string contactName, string phoneNo, string email, string accountNo, int accountType) {
            this.CreateAccountAsync(companyName, contactName, phoneNo, email, accountNo, accountType, null);
        }
        
        /// <remarks/>
        public void CreateAccountAsync(string companyName, string contactName, string phoneNo, string email, string accountNo, int accountType, object userState) {
            if ((this.CreateAccountOperationCompleted == null)) {
                this.CreateAccountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateAccountOperationCompleted);
            }
            this.InvokeAsync("CreateAccount", new object[] {
                        companyName,
                        contactName,
                        phoneNo,
                        email,
                        accountNo,
                        accountType}, this.CreateAccountOperationCompleted, userState);
        }
        
        private void OnCreateAccountOperationCompleted(object arg) {
            if ((this.CreateAccountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateAccountCompleted(this, new CreateAccountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("MethodHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.bandl.com/DeleteSubscription", RequestElementName="DeleteSubscription", RequestNamespace="http://www.bandl.com", ResponseElementName="DeleteSubscriptionResponse", ResponseNamespace="http://www.bandl.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteAccount(string subscription) {
            this.Invoke("DeleteAccount", new object[] {
                        subscription});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeleteAccount(string subscription, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeleteAccount", new object[] {
                        subscription}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndDeleteAccount(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void DeleteAccountAsync(string subscription) {
            this.DeleteAccountAsync(subscription, null);
        }
        
        /// <remarks/>
        public void DeleteAccountAsync(string subscription, object userState) {
            if ((this.DeleteAccountOperationCompleted == null)) {
                this.DeleteAccountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteAccountOperationCompleted);
            }
            this.InvokeAsync("DeleteAccount", new object[] {
                        subscription}, this.DeleteAccountOperationCompleted, userState);
        }
        
        private void OnDeleteAccountOperationCompleted(object arg) {
            if ((this.DeleteAccountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteAccountCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("MethodHeaderValue")]
        [System.Web.Services.WebMethodAttribute(MessageName="DeleteAccount1")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.bandl.com/DeleteAccount", RequestElementName="DeleteAccount", RequestNamespace="http://www.bandl.com", ResponseElementName="DeleteAccountResponse", ResponseNamespace="http://www.bandl.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteAccount(string accountNo, int accountType) {
            this.Invoke("DeleteAccount1", new object[] {
                        accountNo,
                        accountType});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeleteAccount1(string accountNo, int accountType, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeleteAccount1", new object[] {
                        accountNo,
                        accountType}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndDeleteAccount1(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void DeleteAccount1Async(string accountNo, int accountType) {
            this.DeleteAccount1Async(accountNo, accountType, null);
        }
        
        /// <remarks/>
        public void DeleteAccount1Async(string accountNo, int accountType, object userState) {
            if ((this.DeleteAccount1OperationCompleted == null)) {
                this.DeleteAccount1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteAccount1OperationCompleted);
            }
            this.InvokeAsync("DeleteAccount1", new object[] {
                        accountNo,
                        accountType}, this.DeleteAccount1OperationCompleted, userState);
        }
        
        private void OnDeleteAccount1OperationCompleted(object arg) {
            if ((this.DeleteAccount1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteAccount1Completed(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("MethodHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.bandl.com/GrantLicense", RequestNamespace="http://www.bandl.com", ResponseNamespace="http://www.bandl.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void GrantLicense(string accountNo, int accountType, int licenseType, int units, System.DateTime expireDate) {
            this.Invoke("GrantLicense", new object[] {
                        accountNo,
                        accountType,
                        licenseType,
                        units,
                        expireDate});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGrantLicense(string accountNo, int accountType, int licenseType, int units, System.DateTime expireDate, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GrantLicense", new object[] {
                        accountNo,
                        accountType,
                        licenseType,
                        units,
                        expireDate}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndGrantLicense(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void GrantLicenseAsync(string accountNo, int accountType, int licenseType, int units, System.DateTime expireDate) {
            this.GrantLicenseAsync(accountNo, accountType, licenseType, units, expireDate, null);
        }
        
        /// <remarks/>
        public void GrantLicenseAsync(string accountNo, int accountType, int licenseType, int units, System.DateTime expireDate, object userState) {
            if ((this.GrantLicenseOperationCompleted == null)) {
                this.GrantLicenseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGrantLicenseOperationCompleted);
            }
            this.InvokeAsync("GrantLicense", new object[] {
                        accountNo,
                        accountType,
                        licenseType,
                        units,
                        expireDate}, this.GrantLicenseOperationCompleted, userState);
        }
        
        private void OnGrantLicenseOperationCompleted(object arg) {
            if ((this.GrantLicenseCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GrantLicenseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("MethodHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.bandl.com/AuditListXmitSend", RequestNamespace="http://www.bandl.com", ResponseNamespace="http://www.bandl.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AuditListXmitSend(System.DateTime actionTime, string listName, int numItems, int status, string exception) {
            this.Invoke("AuditListXmitSend", new object[] {
                        actionTime,
                        listName,
                        numItems,
                        status,
                        exception});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAuditListXmitSend(System.DateTime actionTime, string listName, int numItems, int status, string exception, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AuditListXmitSend", new object[] {
                        actionTime,
                        listName,
                        numItems,
                        status,
                        exception}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndAuditListXmitSend(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void AuditListXmitSendAsync(System.DateTime actionTime, string listName, int numItems, int status, string exception) {
            this.AuditListXmitSendAsync(actionTime, listName, numItems, status, exception, null);
        }
        
        /// <remarks/>
        public void AuditListXmitSendAsync(System.DateTime actionTime, string listName, int numItems, int status, string exception, object userState) {
            if ((this.AuditListXmitSendOperationCompleted == null)) {
                this.AuditListXmitSendOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAuditListXmitSendOperationCompleted);
            }
            this.InvokeAsync("AuditListXmitSend", new object[] {
                        actionTime,
                        listName,
                        numItems,
                        status,
                        exception}, this.AuditListXmitSendOperationCompleted, userState);
        }
        
        private void OnAuditListXmitSendOperationCompleted(object arg) {
            if ((this.AuditListXmitSendCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AuditListXmitSendCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("MethodHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.bandl.com/AuditListXmitReceive", RequestNamespace="http://www.bandl.com", ResponseNamespace="http://www.bandl.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AuditListXmitReceive(string accountNo, int accountType, System.DateTime actionTime, string listName, int numItems, int status, string fileName) {
            this.Invoke("AuditListXmitReceive", new object[] {
                        accountNo,
                        accountType,
                        actionTime,
                        listName,
                        numItems,
                        status,
                        fileName});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAuditListXmitReceive(string accountNo, int accountType, System.DateTime actionTime, string listName, int numItems, int status, string fileName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AuditListXmitReceive", new object[] {
                        accountNo,
                        accountType,
                        actionTime,
                        listName,
                        numItems,
                        status,
                        fileName}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndAuditListXmitReceive(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void AuditListXmitReceiveAsync(string accountNo, int accountType, System.DateTime actionTime, string listName, int numItems, int status, string fileName) {
            this.AuditListXmitReceiveAsync(accountNo, accountType, actionTime, listName, numItems, status, fileName, null);
        }
        
        /// <remarks/>
        public void AuditListXmitReceiveAsync(string accountNo, int accountType, System.DateTime actionTime, string listName, int numItems, int status, string fileName, object userState) {
            if ((this.AuditListXmitReceiveOperationCompleted == null)) {
                this.AuditListXmitReceiveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAuditListXmitReceiveOperationCompleted);
            }
            this.InvokeAsync("AuditListXmitReceive", new object[] {
                        accountNo,
                        accountType,
                        actionTime,
                        listName,
                        numItems,
                        status,
                        fileName}, this.AuditListXmitReceiveOperationCompleted, userState);
        }
        
        private void OnAuditListXmitReceiveOperationCompleted(object arg) {
            if ((this.AuditListXmitReceiveCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AuditListXmitReceiveCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("MethodHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.bandl.com/GetWebVersionRange", RequestNamespace="http://www.bandl.com", ResponseNamespace="http://www.bandl.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetWebVersionRange(string databaseVersion) {
            object[] results = this.Invoke("GetWebVersionRange", new object[] {
                        databaseVersion});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetWebVersionRange(string databaseVersion, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetWebVersionRange", new object[] {
                        databaseVersion}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetWebVersionRange(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetWebVersionRangeAsync(string databaseVersion) {
            this.GetWebVersionRangeAsync(databaseVersion, null);
        }
        
        /// <remarks/>
        public void GetWebVersionRangeAsync(string databaseVersion, object userState) {
            if ((this.GetWebVersionRangeOperationCompleted == null)) {
                this.GetWebVersionRangeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetWebVersionRangeOperationCompleted);
            }
            this.InvokeAsync("GetWebVersionRange", new object[] {
                        databaseVersion}, this.GetWebVersionRangeOperationCompleted, userState);
        }
        
        private void OnGetWebVersionRangeOperationCompleted(object arg) {
            if ((this.GetWebVersionRangeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetWebVersionRangeCompleted(this, new GetWebVersionRangeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.bandl.com")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.bandl.com", IsNullable=false)]
    public partial class MethodHeader : System.Web.Services.Protocols.SoapHeader {
        
        private string accountNoField;
        
        private string passwordField;
        
        private int accountTypeField;
        
        /// <remarks/>
        public string AccountNo {
            get {
                return this.accountNoField;
            }
            set {
                this.accountNoField = value;
            }
        }
        
        /// <remarks/>
        public string Password {
            get {
                return this.passwordField;
            }
            set {
                this.passwordField = value;
            }
        }
        
        /// <remarks/>
        public int AccountType {
            get {
                return this.accountTypeField;
            }
            set {
                this.accountTypeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.bandl.com")]
    public partial class ProductLicenseDetails {
        
        private int unitsField;
        
        private int licenseTypeField;
        
        private System.DateTime issueDateField;
        
        private System.DateTime expireDateField;
        
        /// <remarks/>
        public int Units {
            get {
                return this.unitsField;
            }
            set {
                this.unitsField = value;
            }
        }
        
        /// <remarks/>
        public int LicenseType {
            get {
                return this.licenseTypeField;
            }
            set {
                this.licenseTypeField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime IssueDate {
            get {
                return this.issueDateField;
            }
            set {
                this.issueDateField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime ExpireDate {
            get {
                return this.expireDateField;
            }
            set {
                this.expireDateField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.bandl.com")]
    public partial class MediumTypeDetails {
        
        private string typeNameField;
        
        private bool twoSidedField;
        
        private bool containerField;
        
        /// <remarks/>
        public string TypeName {
            get {
                return this.typeNameField;
            }
            set {
                this.typeNameField = value;
            }
        }
        
        /// <remarks/>
        public bool TwoSided {
            get {
                return this.twoSidedField;
            }
            set {
                this.twoSidedField = value;
            }
        }
        
        /// <remarks/>
        public bool Container {
            get {
                return this.containerField;
            }
            set {
                this.containerField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void OnlineHelpParametersCompletedEventHandler(object sender, OnlineHelpParametersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class OnlineHelpParametersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal OnlineHelpParametersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string engine {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string project {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string window {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetMediumTypesCompletedEventHandler(object sender, GetMediumTypesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMediumTypesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMediumTypesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public MediumTypeDetails[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((MediumTypeDetails[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void PublishExceptionCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void NewScriptExistsCompletedEventHandler(object sender, NewScriptExistsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class NewScriptExistsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal NewScriptExistsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void DownloadNextScriptCompletedEventHandler(object sender, DownloadNextScriptCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DownloadNextScriptCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DownloadNextScriptCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string newVersion {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void ReceiveSubaccountsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void RetrieveLicensesCompletedEventHandler(object sender, RetrieveLicensesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RetrieveLicensesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RetrieveLicensesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ProductLicenseDetails[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ProductLicenseDetails[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void CreateAccountCompletedEventHandler(object sender, CreateAccountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateAccountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateAccountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void DeleteAccountCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void DeleteAccount1CompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GrantLicenseCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void AuditListXmitSendCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void AuditListXmitReceiveCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetWebVersionRangeCompletedEventHandler(object sender, GetWebVersionRangeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetWebVersionRangeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetWebVersionRangeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591